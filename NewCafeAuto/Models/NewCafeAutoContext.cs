// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace NewCafeAuto.Models
{
    public partial class NewCafeAutoContext : DbContext
    {
        public NewCafeAutoContext()
        {
        }

        public NewCafeAutoContext(DbContextOptions<NewCafeAutoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Addresses> Addresses { get; set; }
        public virtual DbSet<Cafe> Cafe { get; set; }
        public virtual DbSet<Cards> Cards { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<Profiles> Profiles { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Addresses>(entity =>
            {
                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.FullAddress).HasMaxLength(200);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Street).HasMaxLength(100);

                entity.Property(e => e.Town).HasMaxLength(50);

                entity.HasOne(d => d.Cafe)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.CafeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Addresses_Cafe");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.CompanyId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Addresses_Company");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Addresses)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Addresses_Users");
            });

            modelBuilder.Entity<Cafe>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Cafe)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_Cafe_Company");
            });

            modelBuilder.Entity<Cards>(entity =>
            {
                entity.Property(e => e.BillingCardBrand).HasMaxLength(50);

                entity.Property(e => e.BillingCardLast4).HasMaxLength(50);

                entity.Property(e => e.TosAcceptedByIp).HasMaxLength(50);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Cards)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Cards_Users");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Photo).HasMaxLength(150);

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.Category)
                    .HasForeignKey(d => d.MenuId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Category_Menu");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EmailProofToken).HasMaxLength(50);

                entity.Property(e => e.EmailProofTokenExpiresAt).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(100);

                entity.Property(e => e.PasswordResetToken).HasMaxLength(50);

                entity.Property(e => e.PasswordResetTokenExpiresAt).HasColumnType("datetime");

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);

                entity.Property(e => e.Photo).HasMaxLength(150);

                entity.Property(e => e.Registration).HasMaxLength(50);

                entity.Property(e => e.SignToken).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UpdatedDate).HasMaxLength(50);

                entity.HasOne(d => d.Cafe)
                    .WithMany(p => p.Menu)
                    .HasForeignKey(d => d.CafeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Menu_Cafe");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Photo).HasMaxLength(150);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Product_Category");
            });

            modelBuilder.Entity<Profiles>(entity =>
            {
                entity.Property(e => e.BirthDate).HasMaxLength(50);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EmailProofToken).HasMaxLength(50);

                entity.Property(e => e.EmailProofTokenExpiresAt).HasColumnType("datetime");

                entity.Property(e => e.Password).HasMaxLength(100);

                entity.Property(e => e.PasswordResetToken).HasMaxLength(50);

                entity.Property(e => e.PasswordResetTokenExpiresAt).HasColumnType("datetime");

                entity.Property(e => e.RegistrationDate).HasMaxLength(50);

                entity.Property(e => e.SignToken).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.HasOne(d => d.Profile)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.ProfileId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Users_Profiles");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}